# -*- mode: org; -*-
* DONE structuring packages
  CLOSED: [2010-06-08 Tue 03:20]
  - CLOSING NOTE [2010-06-08 Tue 03:20] \\
    seems a reasonable solution: submodules in directories; housed under a
    common namespace.
  http://groups.google.com/group/golang-nuts/browse_thread/thread/ad6fff21620536c8

  http://code.google.com/p/kylelemons/source/browse/trunk/go/godepgen/godepgen.go
  http://pastebin.com/FQhErr5T
  http://pastie.org/989808
* TODO makefiles and test-cases
  http://golang.org/doc/code.html

  we probably need a generic file mechanism to write testcases; unless
  we can simulate stdin.
* TODO reflection on tokens
  should we use =reflect.Typeof()=, possibly doing comparison with null
  instantiations; string comparison on =Name()=; or just use ints in
  =token.Token()=?

  it would be nice to have lightweight and general comparison
  predicates: =IsToken(token, lexer.DONE)=; =IsDone(token)=, etc.

  we could force every token type to implement =IsDone()=,
  =IsOperator()= in the interface, of course. all very cumbersome.

  =match=, too, would have to take a predicate in that case; not an
  integer.

  #+BEGIN_SRC go
    func IsToken(token *token, type *token) bool {
        return reflect.Typeof(token) == reflect.Typeof(type)
    }
  #+END_SRC

  this won't work, though, because constants can't be dynamic; unless,
  of course, we establish singletons.
* TODO position
  ah, very clever; they have: byte offset and filename in addition:

  #+BEGIN_SRC go
    type Position struct {
        Filename string // filename, if any
        Offset   int    // byte offset, starting at 0
        Line     int    // line number, starting at 1
        Column   int    // column number, starting at 1 (character count)
    }
  #+END_SRC
* DONE as opposed to explicitly copying struct
  CLOSED: [2010-06-07 Mon 04:46]
  exploit the copy-on-pass-by-value semantics.
* TODO file
  at some point, lexan is going to have to accept files/input streams.
* DONE repl
  CLOSED: [2010-06-08 Tue 00:07]
  - forked, compilable :: http://github.com/qrush/go-repl
  - bash-based :: http://sigpipe.org/go/tools/gorepl
* DONE lineNumber as pointer
  CLOSED: [2010-06-08 Tue 00:07]
  - CLOSING NOTE [2010-06-08 Tue 00:07] \\
    we have a conflated state-position struct (soon to be disassociated?).
  should we just take an int and return the new int, updating
  optionally on the calling side?

  state struct, including line number?
* TODO Value() and err
  thet fact that Value() returns an error means that we're already
  doing some parsing in the lexer; though the book mentioned that the
  phases are not utterly distinct, shouldn't we practice it thus
  initially?
* TODO token struct
  interesting: their token struct include regular expressions (mine,
  merely predicates?):
  http://search.cpan.org/~pscust/ParseLex-2.19/lib/Parse/Token.pm
* TODO fmt.Scan
  S-expressions over a Scan interface: http://pastie.org/979383

  Scan handles the mechanics, apparently, of rune-by-rune processing.
